{"ast":null,"code":"import _asyncToGenerator from \"D:/My projects/csharp/TestAspAngProj/TestAspAngProj/TestAspAngProj/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { HeaderNames } from \"./HeaderNames\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\n/** @private */\n\nexport class WebSocketTransport {\n  constructor(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {\n    this._logger = logger;\n    this._accessTokenFactory = accessTokenFactory;\n    this._logMessageContent = logMessageContent;\n    this._webSocketConstructor = webSocketConstructor;\n    this._httpClient = httpClient;\n    this.onreceive = null;\n    this.onclose = null;\n    this._headers = headers;\n  }\n\n  connect(url, transferFormat) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      Arg.isRequired(url, \"url\");\n      Arg.isRequired(transferFormat, \"transferFormat\");\n      Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n      _this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\n\n      let token;\n\n      if (_this._accessTokenFactory) {\n        token = yield _this._accessTokenFactory();\n      }\n\n      return new Promise((resolve, reject) => {\n        url = url.replace(/^http/, \"ws\");\n        let webSocket;\n\n        const cookies = _this._httpClient.getCookieString(url);\n\n        let opened = false;\n\n        if (Platform.isNode || Platform.isReactNative) {\n          const headers = {};\n          const [name, value] = getUserAgentHeader();\n          headers[name] = value;\n\n          if (token) {\n            headers[HeaderNames.Authorization] = `Bearer ${token}`;\n          }\n\n          if (cookies) {\n            headers[HeaderNames.Cookie] = cookies;\n          } // Only pass headers when in non-browser environments\n\n\n          webSocket = new _this._webSocketConstructor(url, undefined, {\n            headers: { ...headers,\n              ..._this._headers\n            }\n          });\n        } else {\n          if (token) {\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\n          }\n        }\n\n        if (!webSocket) {\n          // Chrome is not happy with passing 'undefined' as protocol\n          webSocket = new _this._webSocketConstructor(url);\n        }\n\n        if (transferFormat === TransferFormat.Binary) {\n          webSocket.binaryType = \"arraybuffer\";\n        }\n\n        webSocket.onopen = _event => {\n          _this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\n\n          _this._webSocket = webSocket;\n          opened = true;\n          resolve();\n        };\n\n        webSocket.onerror = event => {\n          let error = null; // ErrorEvent is a browser only type we need to check if the type exists before using it\n\n          if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n            error = event.error;\n          } else {\n            error = \"There was an error with the transport\";\n          }\n\n          _this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\n        };\n\n        webSocket.onmessage = message => {\n          _this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, _this._logMessageContent)}.`);\n\n          if (_this.onreceive) {\n            try {\n              _this.onreceive(message.data);\n            } catch (error) {\n              _this._close(error);\n\n              return;\n            }\n          }\n        };\n\n        webSocket.onclose = event => {\n          // Don't call close handler if connection was never established\n          // We'll reject the connect call instead\n          if (opened) {\n            _this._close(event);\n          } else {\n            let error = null; // ErrorEvent is a browser only type we need to check if the type exists before using it\n\n            if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n              error = event.error;\n            } else {\n              error = \"WebSocket failed to connect. The connection could not be found on the server,\" + \" either the endpoint may not be a SignalR endpoint,\" + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\" + \" If you have multiple servers check that sticky sessions are enabled.\";\n            }\n\n            reject(new Error(error));\n          }\n        };\n      });\n    })();\n  }\n\n  send(data) {\n    if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\n      this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\n\n      this._webSocket.send(data);\n\n      return Promise.resolve();\n    }\n\n    return Promise.reject(\"WebSocket is not in the OPEN state\");\n  }\n\n  stop() {\n    if (this._webSocket) {\n      // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\n      // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\n      this._close(undefined);\n    }\n\n    return Promise.resolve();\n  }\n\n  _close(event) {\n    // webSocket will be null if the transport did not start successfully\n    if (this._webSocket) {\n      // Clear websocket handlers because we are considering the socket closed now\n      this._webSocket.onclose = () => {};\n\n      this._webSocket.onmessage = () => {};\n\n      this._webSocket.onerror = () => {};\n\n      this._webSocket.close();\n\n      this._webSocket = undefined;\n    }\n\n    this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\n\n    if (this.onclose) {\n      if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\n        this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\n      } else if (event instanceof Error) {\n        this.onclose(event);\n      } else {\n        this.onclose();\n      }\n    }\n  }\n\n  _isCloseEvent(event) {\n    return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\n  }\n\n}","map":{"version":3,"names":["HeaderNames","LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","Platform","WebSocketTransport","constructor","httpClient","accessTokenFactory","logger","logMessageContent","webSocketConstructor","headers","_logger","_accessTokenFactory","_logMessageContent","_webSocketConstructor","_httpClient","onreceive","onclose","_headers","connect","url","transferFormat","isRequired","isIn","log","Trace","token","Promise","resolve","reject","replace","webSocket","cookies","getCookieString","opened","isNode","isReactNative","name","value","Authorization","Cookie","undefined","indexOf","encodeURIComponent","Binary","binaryType","onopen","_event","Information","_webSocket","onerror","event","error","ErrorEvent","onmessage","message","data","_close","Error","send","readyState","OPEN","stop","close","_isCloseEvent","wasClean","code","reason"],"sources":["D:/My projects/csharp/TestAspAngProj/TestAspAngProj/TestAspAngProj/ClientApp/node_modules/@microsoft/signalr/dist/esm/WebSocketTransport.js"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n/** @private */\r\nexport class WebSocketTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n        let token;\r\n        if (this._accessTokenFactory) {\r\n            token = await this._accessTokenFactory();\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n            if (Platform.isNode || Platform.isReactNative) {\r\n                const headers = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                if (token) {\r\n                    headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n                }\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = cookies;\r\n                }\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n            else {\r\n                if (token) {\r\n                    url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n                }\r\n            }\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n            webSocket.onopen = (_event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n            webSocket.onerror = (event) => {\r\n                let error = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                }\r\n                else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n            webSocket.onmessage = (message) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    }\r\n                    catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n            webSocket.onclose = (event) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                }\r\n                else {\r\n                    let error = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    }\r\n                    else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the endpoint may not be a SignalR endpoint,\"\r\n                            + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n    send(data) {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n    stop() {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _close(event) {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => { };\r\n            this._webSocket.onmessage = () => { };\r\n            this._webSocket.onerror = () => { };\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            }\r\n            else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            }\r\n            else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n    _isCloseEvent(event) {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}