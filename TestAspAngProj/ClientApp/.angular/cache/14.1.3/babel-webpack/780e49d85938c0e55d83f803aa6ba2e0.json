{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.apiUrl = 'api/Data';\n    }\n\n    getUserData() {\n      const userId = this.authService.getUserId();\n\n      if (userId) {\n        return this.http.get(`${this.apiUrl}/getuser/${userId}`);\n      } else {\n        return new Observable();\n      }\n    }\n\n    searchUsersByNickname(nickname) {\n      const userid = this.authService.getUserId();\n      const requestData = {\n        nickname: nickname,\n        userid: userid\n      };\n      return this.http.post(`${this.apiUrl}/SearchUsers`, requestData);\n    }\n\n    getChats() {\n      const userId = this.authService.getUserId();\n\n      if (userId) {\n        return this.http.get(`${this.apiUrl}/GetChats/${userId}`);\n      } else {\n        return new Observable();\n      }\n    }\n\n    getMessages(chatId) {\n      if (chatId != undefined) {\n        return this.http.get(`${this.apiUrl}/GetMessages/${chatId}`);\n      }\n\n      return new Observable();\n    }\n\n    createChat(secondUserId) {\n      const userId = this.authService.getUserId();\n      const requestData = {\n        userId: userId,\n        secondUserId: secondUserId\n      };\n      return this.http.post(`${this.apiUrl}/CreateChat`, requestData).pipe(catchError(error => {\n        console.error('Error creating chat:', error);\n        return throwError(error);\n      }));\n      ;\n    }\n\n    sendMessage(chatId, message) {\n      const userId = this.authService.getUserId();\n      const requestData = {\n        chatId: chatId,\n        userId: userId,\n        message: message\n      };\n      return this.http.post(`${this.apiUrl}/SendMessage`, requestData).pipe(catchError(error => {\n        console.error('Error send message', error);\n        return throwError(error);\n      }));\n    }\n\n    changeNickname(nickname) {\n      const userId = this.authService.getUserId();\n      const requestData = {\n        userId: userId,\n        nickname: nickname\n      };\n      return this.http.post(`${this.apiUrl}/ChangeNickname`, requestData).pipe(catchError(error => {\n        console.error('Changenickname error');\n        return throwError(error);\n      }));\n    }\n\n    changeUserImg(imgUrl) {\n      const userId = this.authService.getUserId();\n      const requestData = {\n        userId: userId,\n        imgUrl: imgUrl\n      };\n      return this.http.post(`${this.apiUrl}/ChangeUserImg`, requestData).pipe(catchError(error => {\n        console.error('Changeuserimg error');\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}