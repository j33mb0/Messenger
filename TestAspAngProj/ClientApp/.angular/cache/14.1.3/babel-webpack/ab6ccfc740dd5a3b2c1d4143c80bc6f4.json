{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let SignalRService = /*#__PURE__*/(() => {\n  class SignalRService {\n    constructor(authService) {\n      this.authService = authService;\n      this.chatUpdateSubject = new Subject();\n      this.chatUpdate$ = this.chatUpdateSubject.asObservable();\n      this.messageUpdateSubject = new Subject();\n      this.messageUpdate$ = this.messageUpdateSubject.asObservable();\n      const userId = authService.getUserId();\n      this.hubConnection = new signalR.HubConnectionBuilder().withUrl(`https://localhost:7287/chat?userId=${userId}`, {\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets\n      }).build();\n      this.startConnection();\n    }\n\n    startConnection() {\n      this.hubConnection.start().then(() => {\n        console.log('SignalR connection started');\n      }).catch(error => {\n        console.error('Error while starting SignalR connection:', error);\n      });\n      this.hubConnection.on('ReceiveChatUpdate', message => {\n        console.log('chatupdatereceived', message);\n        this.chatUpdateSubject.next(message);\n      });\n      this.hubConnection.on('ReceiveMessage', message => {\n        console.log('messageupdatereceived', message);\n        this.messageUpdateSubject.next(message);\n      });\n    }\n\n  }\n\n  SignalRService.ɵfac = function SignalRService_Factory(t) {\n    return new (t || SignalRService)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  SignalRService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalRService,\n    factory: SignalRService.ɵfac,\n    providedIn: 'root'\n  });\n  return SignalRService;\n})();","map":null,"metadata":{},"sourceType":"module"}