{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { Platform } from \"./Utils\";\n/** @private */\n\nexport function configureFetch(obj) {\n  // Node added a fetch implementation to the global scope starting in v18.\n  // We need to add a cookie jar in node to be able to share cookies with WebSocket\n  if (typeof fetch === \"undefined\" || Platform.isNode) {\n    // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    obj._jar = new (require(\"tough-cookie\").CookieJar)();\n\n    if (typeof fetch === \"undefined\") {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      obj._fetchType = require(\"node-fetch\");\n    } else {\n      // Use fetch from Node if available\n      obj._fetchType = fetch;\n    } // node-fetch doesn't have a nice API for getting and setting cookies\n    // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\n    obj._fetchType = require(\"fetch-cookie\")(obj._fetchType, obj._jar);\n    return true;\n  }\n\n  return false;\n}\n/** @private */\n\nexport function configureAbortController(obj) {\n  if (typeof AbortController === \"undefined\") {\n    // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\n    obj._abortControllerType = require(\"abort-controller\");\n    return true;\n  }\n\n  return false;\n}\n/** @private */\n\nexport function getWS() {\n  return require(\"ws\");\n}\n/** @private */\n\nexport function getEventSource() {\n  return require(\"eventsource\");\n}","map":{"version":3,"names":["Platform","configureFetch","obj","fetch","isNode","_jar","require","CookieJar","_fetchType","configureAbortController","AbortController","_abortControllerType","getWS","getEventSource"],"sources":["D:/My projects/csharp/TestAspAngProj/TestAspAngProj/TestAspAngProj/ClientApp/node_modules/@microsoft/signalr/dist/esm/DynamicImports.js"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { Platform } from \"./Utils\";\r\n/** @private */\r\nexport function configureFetch(obj) {\r\n    // Node added a fetch implementation to the global scope starting in v18.\r\n    // We need to add a cookie jar in node to be able to share cookies with WebSocket\r\n    if (typeof fetch === \"undefined\" || Platform.isNode) {\r\n        // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        obj._jar = new (require(\"tough-cookie\")).CookieJar();\r\n        if (typeof fetch === \"undefined\") {\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            obj._fetchType = require(\"node-fetch\");\r\n        }\r\n        else {\r\n            // Use fetch from Node if available\r\n            obj._fetchType = fetch;\r\n        }\r\n        // node-fetch doesn't have a nice API for getting and setting cookies\r\n        // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        obj._fetchType = require(\"fetch-cookie\")(obj._fetchType, obj._jar);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/** @private */\r\nexport function configureAbortController(obj) {\r\n    if (typeof AbortController === \"undefined\") {\r\n        // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n        obj._abortControllerType = require(\"abort-controller\");\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/** @private */\r\nexport function getWS() {\r\n    return require(\"ws\");\r\n}\r\n/** @private */\r\nexport function getEventSource() {\r\n    return require(\"eventsource\");\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,SAASA,QAAT,QAAyB,SAAzB;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;EAChC;EACA;EACA,IAAI,OAAOC,KAAP,KAAiB,WAAjB,IAAgCH,QAAQ,CAACI,MAA7C,EAAqD;IACjD;IACA;IACAF,GAAG,CAACG,IAAJ,GAAW,KAAKC,OAAO,CAAC,cAAD,CAAR,CAA0BC,SAA9B,GAAX;;IACA,IAAI,OAAOJ,KAAP,KAAiB,WAArB,EAAkC;MAC9B;MACAD,GAAG,CAACM,UAAJ,GAAiBF,OAAO,CAAC,YAAD,CAAxB;IACH,CAHD,MAIK;MACD;MACAJ,GAAG,CAACM,UAAJ,GAAiBL,KAAjB;IACH,CAXgD,CAYjD;IACA;IACA;;;IACAD,GAAG,CAACM,UAAJ,GAAiBF,OAAO,CAAC,cAAD,CAAP,CAAwBJ,GAAG,CAACM,UAA5B,EAAwCN,GAAG,CAACG,IAA5C,CAAjB;IACA,OAAO,IAAP;EACH;;EACD,OAAO,KAAP;AACH;AACD;;AACA,OAAO,SAASI,wBAAT,CAAkCP,GAAlC,EAAuC;EAC1C,IAAI,OAAOQ,eAAP,KAA2B,WAA/B,EAA4C;IACxC;IACAR,GAAG,CAACS,oBAAJ,GAA2BL,OAAO,CAAC,kBAAD,CAAlC;IACA,OAAO,IAAP;EACH;;EACD,OAAO,KAAP;AACH;AACD;;AACA,OAAO,SAASM,KAAT,GAAiB;EACpB,OAAON,OAAO,CAAC,IAAD,CAAd;AACH;AACD;;AACA,OAAO,SAASO,cAAT,GAA0B;EAC7B,OAAOP,OAAO,CAAC,aAAD,CAAd;AACH"},"metadata":{},"sourceType":"module"}