{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { NullLogger } from \"./Loggers\";\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\n/** Implements the JSON Hub Protocol. */\n\nexport class JsonHubProtocol {\n  constructor() {\n    /** @inheritDoc */\n    this.name = JSON_HUB_PROTOCOL_NAME;\n    /** @inheritDoc */\n\n    this.version = 2;\n    /** @inheritDoc */\n\n    this.transferFormat = TransferFormat.Text;\n  }\n  /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n   *\r\n   * @param {string} input A string containing the serialized representation.\r\n   * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n   */\n\n\n  parseMessages(input, logger) {\n    // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\n    if (typeof input !== \"string\") {\n      throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\n    }\n\n    if (!input) {\n      return [];\n    }\n\n    if (logger === null) {\n      logger = NullLogger.instance;\n    } // Parse the messages\n\n\n    const messages = TextMessageFormat.parse(input);\n    const hubMessages = [];\n\n    for (const message of messages) {\n      const parsedMessage = JSON.parse(message);\n\n      if (typeof parsedMessage.type !== \"number\") {\n        throw new Error(\"Invalid payload.\");\n      }\n\n      switch (parsedMessage.type) {\n        case MessageType.Invocation:\n          this._isInvocationMessage(parsedMessage);\n\n          break;\n\n        case MessageType.StreamItem:\n          this._isStreamItemMessage(parsedMessage);\n\n          break;\n\n        case MessageType.Completion:\n          this._isCompletionMessage(parsedMessage);\n\n          break;\n\n        case MessageType.Ping:\n          // Single value, no need to validate\n          break;\n\n        case MessageType.Close:\n          // All optional values, no need to validate\n          break;\n\n        case MessageType.Ack:\n          this._isAckMessage(parsedMessage);\n\n          break;\n\n        case MessageType.Sequence:\n          this._isSequenceMessage(parsedMessage);\n\n          break;\n\n        default:\n          // Future protocol changes can add message types, old clients can ignore them\n          logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\n          continue;\n      }\n\n      hubMessages.push(parsedMessage);\n    }\n\n    return hubMessages;\n  }\n  /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n   *\r\n   * @param {HubMessage} message The message to write.\r\n   * @returns {string} A string containing the serialized representation of the message.\r\n   */\n\n\n  writeMessage(message) {\n    return TextMessageFormat.write(JSON.stringify(message));\n  }\n\n  _isInvocationMessage(message) {\n    this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\n\n    if (message.invocationId !== undefined) {\n      this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\n    }\n  }\n\n  _isStreamItemMessage(message) {\n    this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\n\n    if (message.item === undefined) {\n      throw new Error(\"Invalid payload for StreamItem message.\");\n    }\n  }\n\n  _isCompletionMessage(message) {\n    if (message.result && message.error) {\n      throw new Error(\"Invalid payload for Completion message.\");\n    }\n\n    if (!message.result && message.error) {\n      this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\n    }\n\n    this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\n  }\n\n  _isAckMessage(message) {\n    if (typeof message.sequenceId !== 'number') {\n      throw new Error(\"Invalid SequenceId for Ack message.\");\n    }\n  }\n\n  _isSequenceMessage(message) {\n    if (typeof message.sequenceId !== 'number') {\n      throw new Error(\"Invalid SequenceId for Sequence message.\");\n    }\n  }\n\n  _assertNotEmptyString(value, errorMessage) {\n    if (typeof value !== \"string\" || value === \"\") {\n      throw new Error(errorMessage);\n    }\n  }\n\n}","map":{"version":3,"names":["MessageType","LogLevel","TransferFormat","NullLogger","TextMessageFormat","JSON_HUB_PROTOCOL_NAME","JsonHubProtocol","constructor","name","version","transferFormat","Text","parseMessages","input","logger","Error","instance","messages","parse","hubMessages","message","parsedMessage","JSON","type","Invocation","_isInvocationMessage","StreamItem","_isStreamItemMessage","Completion","_isCompletionMessage","Ping","Close","Ack","_isAckMessage","Sequence","_isSequenceMessage","log","Information","push","writeMessage","write","stringify","_assertNotEmptyString","target","invocationId","undefined","item","result","error","sequenceId","value","errorMessage"],"sources":["D:/My projects/csharp/TestAspAngProj/TestAspAngProj/TestAspAngProj/ClientApp/node_modules/@microsoft/signalr/dist/esm/JsonHubProtocol.js"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol {\r\n    constructor() {\r\n        /** @inheritDoc */\r\n        this.name = JSON_HUB_PROTOCOL_NAME;\r\n        /** @inheritDoc */\r\n        this.version = 2;\r\n        /** @inheritDoc */\r\n        this.transferFormat = TransferFormat.Text;\r\n    }\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input, logger) {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n        if (!input) {\r\n            return [];\r\n        }\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message);\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                case MessageType.Ack:\r\n                    this._isAckMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Sequence:\r\n                    this._isSequenceMessage(parsedMessage);\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n        return hubMessages;\r\n    }\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message) {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n    _isInvocationMessage(message) {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n    _isStreamItemMessage(message) {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n    _isCompletionMessage(message) {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n    _isAckMessage(message) {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Ack message.\");\r\n        }\r\n    }\r\n    _isSequenceMessage(message) {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Sequence message.\");\r\n        }\r\n    }\r\n    _assertNotEmptyString(value, errorMessage) {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}