{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as jwt_decode from 'jwt-decode';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport const TOKEN_NAME = 'jwt_token';\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.loginUrl = 'https://localhost:7287/api/Auth/login';\n      this.registerUrl = 'https://localhost:7287/api/Auth/register';\n      this.headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.jwtHelper = new JwtHelperService();\n    }\n\n    getToken() {\n      return localStorage.getItem(TOKEN_NAME);\n    }\n\n    setToken(token) {\n      localStorage.setItem(TOKEN_NAME, token);\n    }\n\n    getTokenExpirationDate(token) {\n      const decoded = jwt_decode.jwtDecode(token);\n      if (decoded.exp === undefined) return null;\n      const date = new Date(0);\n      date.setUTCSeconds(decoded.exp);\n      return date;\n    }\n\n    isTokenExpired(token) {\n      if (!token) {\n        token = this.getToken();\n      }\n\n      if (!token) return true;\n      const date = this.getTokenExpirationDate(token);\n      if (date === undefined) return false;\n      return !(date.valueOf() > new Date().valueOf());\n    }\n\n    removeToken() {\n      localStorage.removeItem(TOKEN_NAME);\n    }\n\n    login(name, pass) {\n      const jsonData = {\n        username: name,\n        password: pass\n      };\n      return this.http.post(this.loginUrl, jsonData, {\n        headers: this.headers\n      });\n    }\n\n    register(name, pass) {\n      const jsonData = {\n        username: name,\n        password: pass\n      };\n      return this.http.post(this.registerUrl, jsonData, {\n        headers: this.headers\n      });\n    }\n\n    getUserId() {\n      const token = this.getToken();\n\n      if (token && !this.isTokenExpired(token)) {\n        const decodeToken = this.jwtHelper.decodeToken(token);\n        return decodeToken.Id;\n      }\n\n      return 0;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}