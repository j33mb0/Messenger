{"ast":null,"code":"export class InvalidTokenError extends Error {}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\n\nfunction b64DecodeUnicode(str) {\n  return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n    let code = p.charCodeAt(0).toString(16).toUpperCase();\n\n    if (code.length < 2) {\n      code = \"0\" + code;\n    }\n\n    return \"%\" + code;\n  }));\n}\n\nfunction base64UrlDecode(str) {\n  let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n  switch (output.length % 4) {\n    case 0:\n      break;\n\n    case 2:\n      output += \"==\";\n      break;\n\n    case 3:\n      output += \"=\";\n      break;\n\n    default:\n      throw new Error(\"base64 string is not of the correct length\");\n  }\n\n  try {\n    return b64DecodeUnicode(output);\n  } catch (err) {\n    return atob(output);\n  }\n}\n\nexport function jwtDecode(token, options) {\n  if (typeof token !== \"string\") {\n    throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n  }\n\n  options || (options = {});\n  const pos = options.header === true ? 0 : 1;\n  const part = token.split(\".\")[pos];\n\n  if (typeof part !== \"string\") {\n    throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n  }\n\n  let decoded;\n\n  try {\n    decoded = base64UrlDecode(part);\n  } catch (e) {\n    throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n  }\n\n  try {\n    return JSON.parse(decoded);\n  } catch (e) {\n    throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n  }\n}","map":{"version":3,"names":["InvalidTokenError","Error","prototype","name","b64DecodeUnicode","str","decodeURIComponent","atob","replace","m","p","code","charCodeAt","toString","toUpperCase","length","base64UrlDecode","output","err","jwtDecode","token","options","pos","header","part","split","decoded","e","message","JSON","parse"],"sources":["D:/My projects/csharp/TestAspAngProj/TestAspAngProj/TestAspAngProj/ClientApp/node_modules/jwt-decode/build/esm/index.js"],"sourcesContent":["export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,iBAAN,SAAgCC,KAAhC,CAAsC;AAE7CD,iBAAiB,CAACE,SAAlB,CAA4BC,IAA5B,GAAmC,mBAAnC;;AACA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;EAC3B,OAAOC,kBAAkB,CAACC,IAAI,CAACF,GAAD,CAAJ,CAAUG,OAAV,CAAkB,MAAlB,EAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAU;IAC1D,IAAIC,IAAI,GAAGD,CAAC,CAACE,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,EAA6BC,WAA7B,EAAX;;IACA,IAAIH,IAAI,CAACI,MAAL,GAAc,CAAlB,EAAqB;MACjBJ,IAAI,GAAG,MAAMA,IAAb;IACH;;IACD,OAAO,MAAMA,IAAb;EACH,CANyB,CAAD,CAAzB;AAOH;;AACD,SAASK,eAAT,CAAyBX,GAAzB,EAA8B;EAC1B,IAAIY,MAAM,GAAGZ,GAAG,CAACG,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,EAAuBA,OAAvB,CAA+B,IAA/B,EAAqC,GAArC,CAAb;;EACA,QAAQS,MAAM,CAACF,MAAP,GAAgB,CAAxB;IACI,KAAK,CAAL;MACI;;IACJ,KAAK,CAAL;MACIE,MAAM,IAAI,IAAV;MACA;;IACJ,KAAK,CAAL;MACIA,MAAM,IAAI,GAAV;MACA;;IACJ;MACI,MAAM,IAAIhB,KAAJ,CAAU,4CAAV,CAAN;EAVR;;EAYA,IAAI;IACA,OAAOG,gBAAgB,CAACa,MAAD,CAAvB;EACH,CAFD,CAGA,OAAOC,GAAP,EAAY;IACR,OAAOX,IAAI,CAACU,MAAD,CAAX;EACH;AACJ;;AACD,OAAO,SAASE,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;EACtC,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;IAC3B,MAAM,IAAIpB,iBAAJ,CAAsB,2CAAtB,CAAN;EACH;;EACDqB,OAAO,KAAKA,OAAO,GAAG,EAAf,CAAP;EACA,MAAMC,GAAG,GAAGD,OAAO,CAACE,MAAR,KAAmB,IAAnB,GAA0B,CAA1B,GAA8B,CAA1C;EACA,MAAMC,IAAI,GAAGJ,KAAK,CAACK,KAAN,CAAY,GAAZ,EAAiBH,GAAjB,CAAb;;EACA,IAAI,OAAOE,IAAP,KAAgB,QAApB,EAA8B;IAC1B,MAAM,IAAIxB,iBAAJ,CAAuB,0CAAyCsB,GAAG,GAAG,CAAE,EAAxE,CAAN;EACH;;EACD,IAAII,OAAJ;;EACA,IAAI;IACAA,OAAO,GAAGV,eAAe,CAACQ,IAAD,CAAzB;EACH,CAFD,CAGA,OAAOG,CAAP,EAAU;IACN,MAAM,IAAI3B,iBAAJ,CAAuB,qDAAoDsB,GAAG,GAAG,CAAE,KAAIK,CAAC,CAACC,OAAQ,GAAjG,CAAN;EACH;;EACD,IAAI;IACA,OAAOC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAP;EACH,CAFD,CAGA,OAAOC,CAAP,EAAU;IACN,MAAM,IAAI3B,iBAAJ,CAAuB,mDAAkDsB,GAAG,GAAG,CAAE,KAAIK,CAAC,CAACC,OAAQ,GAA/F,CAAN;EACH;AACJ"},"metadata":{},"sourceType":"module"}