{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n/** Represents an HTTP response. */\nexport class HttpResponse {\n  constructor(statusCode, statusText, content) {\n    this.statusCode = statusCode;\n    this.statusText = statusText;\n    this.content = content;\n  }\n\n}\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\n\nexport class HttpClient {\n  get(url, options) {\n    return this.send({ ...options,\n      method: \"GET\",\n      url\n    });\n  }\n\n  post(url, options) {\n    return this.send({ ...options,\n      method: \"POST\",\n      url\n    });\n  }\n\n  delete(url, options) {\n    return this.send({ ...options,\n      method: \"DELETE\",\n      url\n    });\n  }\n  /** Gets all cookies that apply to the specified URL.\r\n   *\r\n   * @param url The URL that the cookies are valid for.\r\n   * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n   */\n  // @ts-ignore\n\n\n  getCookieString(url) {\n    return \"\";\n  }\n\n}","map":{"version":3,"names":["HttpResponse","constructor","statusCode","statusText","content","HttpClient","get","url","options","send","method","post","delete","getCookieString"],"sources":["D:/My projects/csharp/TestAspAngProj/TestAspAngProj/TestAspAngProj/ClientApp/node_modules/@microsoft/signalr/dist/esm/HttpClient.js"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    constructor(statusCode, statusText, content) {\r\n        this.statusCode = statusCode;\r\n        this.statusText = statusText;\r\n        this.content = content;\r\n    }\r\n}\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport class HttpClient {\r\n    get(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n    post(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n    delete(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    getCookieString(url) {\r\n        return \"\";\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;;AACA;AACA,OAAO,MAAMA,YAAN,CAAmB;EACtBC,WAAW,CAACC,UAAD,EAAaC,UAAb,EAAyBC,OAAzB,EAAkC;IACzC,KAAKF,UAAL,GAAkBA,UAAlB;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKC,OAAL,GAAeA,OAAf;EACH;;AALqB;AAO1B;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAN,CAAiB;EACpBC,GAAG,CAACC,GAAD,EAAMC,OAAN,EAAe;IACd,OAAO,KAAKC,IAAL,CAAU,EACb,GAAGD,OADU;MAEbE,MAAM,EAAE,KAFK;MAGbH;IAHa,CAAV,CAAP;EAKH;;EACDI,IAAI,CAACJ,GAAD,EAAMC,OAAN,EAAe;IACf,OAAO,KAAKC,IAAL,CAAU,EACb,GAAGD,OADU;MAEbE,MAAM,EAAE,MAFK;MAGbH;IAHa,CAAV,CAAP;EAKH;;EACDK,MAAM,CAACL,GAAD,EAAMC,OAAN,EAAe;IACjB,OAAO,KAAKC,IAAL,CAAU,EACb,GAAGD,OADU;MAEbE,MAAM,EAAE,QAFK;MAGbH;IAHa,CAAV,CAAP;EAKH;EACD;AACJ;AACA;AACA;AACA;EACI;;;EACAM,eAAe,CAACN,GAAD,EAAM;IACjB,OAAO,EAAP;EACH;;AA9BmB"},"metadata":{},"sourceType":"module"}